class Image
{
    static int off_x, off_y;

    field int _width, _height;
    field Array _map;

    constructor Image new(int width, int height, Array map)
    {
        let _width = width;
        let _height = height;
        let _map = map;
        return this;
    }
    function void set_origin(int x, int y)
    {
        let off_x = x;
        let off_y = y;
        return;
    }
    function void clear(int x1, int y1, int x2, int y2)
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(x1+off_x, y1+off_y, x2+off_x, y2+off_y);
        return;
    }
	function void debug(int x1, int y1, int x2, int y2){
        do Screen.setColor(true);
        do Screen.drawRectangle(x1+off_x, y1+off_y, x2+off_x, y2+off_y);
        return;
	}
    method int _turn_x(int x, int y, int dir)
    {
        var int nx;
        if(dir=0) { let nx = x; }
        if(dir=1) { let nx = _height-y-1; }
        if(dir=2) { let nx = _width-x-1; }
        if(dir=3) { let nx = y; }
        return nx;
    }
    method int _turn_y(int x, int y, int dir)
    {
        var int ny;
        if(dir=0) { let ny = y; }
        if(dir=1) { let ny = x; }
        if(dir=2) { let ny = _height-y-1; }
        if(dir=3) { let ny = _width-x-1; }
        return ny;
    }

    method void draw(int x, int y, int dir)
    {
        var int i, j, k, l, t, dx, dy;
        let i = 0;
        let l = 0;
        let k = 1;
        while(i < _height)
        {
            let j = 0;
            while (j < _width)
            {
                do Screen.setColor(~(k&_map[l]=0));
                let dx = _turn_x(j, i, dir);
                let dy = _turn_y(j, i, dir);
                if((x+dx<512)&(y+dy<256))
                {
                    do Screen.drawPixel(x+dx+off_x, y+dy+off_y);
                }
                if(k < 0) //已經畫完最高位
                {
                    let k = 1;
                    let l = l + 1;
                }
                else { let k = k + k; }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
}
