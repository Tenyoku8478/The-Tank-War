class Map{
	field Array map8, map24;
	constructor Map new(Array _map){
		var int row, col, i, j;
		let map24 = _map;
		let row = 0;
		let map8 = Array.new(30*45);
		while (row < 10){
			let col = 0;
			while (col < 15){
				let i = 0;
				while (i < 3){
					let map8[(row*135)+(col*3)+i] = _map[row*15+col];
					let map8[(row*135)+(col*3)+i+45] = _map[row*15+col];
					let map8[(row*135)+(col*3)+i+90] = _map[row*15+col];
					let i = i + 1;
				}
				let col = col + 1;
			}
			let row = row + 1;
		}
		//QB
		let i = 20;
		while (i < 26){
			let j = 24;
			while (j < 30){
				let map8[i+(j*45)] = 5;
				let j = j + 1;
			}
			let i = i + 1;
		}
		//soft around QB
		let i = 18;
		while (i < 28){
			let map8[22*45+i] = 3;
			let map8[23*45+i] = 3;
			let i = i + 1;
		}
		let i = 24;
		while (i < 30){
			let map8[i*45+18] = 3;
			let map8[i*45+19] = 3;
			let map8[i*45+26] = 3;
			let map8[i*45+27] = 3;
			let i = i + 1;
		}
		return this;
	}
	
	method void debug_draw(){
		var int i, j;
		var Image soft;
		let soft = Album.get_soft();
		let i = 0;
		while (i < 30){
			let j = 0;
			while (j < 45){
				if (~(map8[i*45+j] = 0)){
					do soft.draw(j*8, i*8, 0);
				}
				let j = j + 1;
			}
			let i = i + 1;
		}
		return;
	}

	method void draw(){
		var int row, col, i, j;
		var Image tank1, tank2, soft, hard, QB;
		let tank1 = Album.get_tank1();
		let tank2 = Album.get_tank2();
		let soft = Album.get_soft();
		let hard = Album.get_hard();
		let QB = Album.get_QB();
		let row = 0;
		while (row < 10){
			let col = 0;
			while (col < 15){
				if (map24[row*15+col] = 1){ //I
					do tank1.draw(col*24, row*24, 0);
				}
				if (map24[row*15+col] = 3){ //Soft
					let i = 0;
					while (i < 3){
						let j = 0;
						while (j < 3){
							do soft.draw(col*24+(i*8), row*24+(j*8), 0);
							let j = j + 1;
						}
						let i = i + 1;
					}
				}
				if (map24[row*15+col] = 4){ //Hard
					do hard.draw(col*24, row*24, 0);
				}
				if (map24[row*15+col] = 2){ //Enemy
					do tank2.draw(col*24, row*24, 0);
				}
				let col = col + 1;
			}
			let row = row + 1;
		}
		do QB.draw(160, 200, 0);
		let i = 0;
		while (i < 9){
			do soft.draw(144+(i*8), 184, 0);
			do soft.draw(144+(i*8), 192, 0);
			let i = i + 1;
		}
		let i = 0;
		while (i < 5){
			do soft.draw(144, 200+(i*8), 0);
			do soft.draw(152, 200+(i*8), 0);
			let i = i + 1;
		}
		let i = 0;
		while (i < 5){
			do soft.draw(200, 200+(i*8), 0);
			do soft.draw(208, 200+(i*8), 0);
			let i = i + 1;
		}
		return;
	}

	method boolean check(int x1, int y1, int x2, int y2){
		var int i, j;
		var boolean flag;
		let flag = false;
		if ((x1 < 0) | (y1 < 0) | (x2 > 44) | (y2 > 29)){
			let flag = true;
		}
		let i = x1;
		while (i < (x2+1)){
			let j = y1;
			while (j < (y2+1)){
				let flag = flag | (~(map8[j*45+i]=0));
				let j = j + 1;
			}
			let i = i + 1;
		}
		return ~flag;
	}

	method void update(int x1, int y1, int x2, int y2, int type){
		var int i, j;
		let i = x1;
		while (i < (x2+1)){
			let j = y1;
			while (j < (y2+1)){
				let map8[j*45+i] = type;
				let j = j + 1;
			}
			let i = i + 1;
		}
		return;
	}
}
